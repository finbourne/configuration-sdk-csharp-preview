/*
 * FINBOURNE ConfigurationService API
 *
 * ### Introduction   # Error Codes   | Code|Name|Description | | - --|- --|- -- | | <a name=\"-1\">-1</a>|Unknown error|An unexpected error was encountered on our side. | | <a name=\"144\">144</a>|Duplicate In Parameter Set|  | | <a name=\"151\">151</a>|Invalid Parameter Value|  | | <a name=\"689\">689</a>|The supplied pagination token is invalid|  | | <a name=\"692\">692</a>|This endpoint does not support impersonation|  | | <a name=\"871\">871</a>|The specified impersonated user does not exist|  | 
 *
 * The version of the OpenAPI document: 0.1.549
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Finbourne.Configuration.Sdk.Client.OpenAPIDateConverter;

namespace Finbourne.Configuration.Sdk.Model
{
    /// <summary>
    /// The information required to update a configuration item
    /// </summary>
    [DataContract(Name = "UpdateConfigurationItem")]
    public partial class UpdateConfigurationItem : IEquatable<UpdateConfigurationItem>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateConfigurationItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UpdateConfigurationItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateConfigurationItem" /> class.
        /// </summary>
        /// <param name="value">The new value of the configuration item (required).</param>
        /// <param name="description">The new description of the configuration item.</param>
        /// <param name="blockReveal">The requested new state of BlockReveal.</param>
        public UpdateConfigurationItem(string value = default(string), string description = default(string), bool blockReveal = default(bool))
        {
            // to ensure "value" is required (not null)
            this.Value = value ?? throw new ArgumentNullException("value is a required property for UpdateConfigurationItem and cannot be null");
            this.Description = description;
            this.BlockReveal = blockReveal;
        }

        /// <summary>
        /// The new value of the configuration item
        /// </summary>
        /// <value>The new value of the configuration item</value>
        [DataMember(Name = "value", IsRequired = true, EmitDefaultValue = false)]
        public string Value { get; set; }

        /// <summary>
        /// The new description of the configuration item
        /// </summary>
        /// <value>The new description of the configuration item</value>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// The requested new state of BlockReveal
        /// </summary>
        /// <value>The requested new state of BlockReveal</value>
        [DataMember(Name = "blockReveal", EmitDefaultValue = true)]
        public bool BlockReveal { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateConfigurationItem {\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  BlockReveal: ").Append(BlockReveal).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateConfigurationItem);
        }

        /// <summary>
        /// Returns true if UpdateConfigurationItem instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateConfigurationItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateConfigurationItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.BlockReveal == input.BlockReveal ||
                    this.BlockReveal.Equals(input.BlockReveal)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                hashCode = hashCode * 59 + this.BlockReveal.GetHashCode();
                return hashCode;
            }
        }

    }
}
