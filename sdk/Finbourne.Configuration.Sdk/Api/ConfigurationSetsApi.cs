/*
 * FINBOURNE ConfigurationService API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.448
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Finbourne.Configuration.Sdk.Client;
using Finbourne.Configuration.Sdk.Model;

namespace Finbourne.Configuration.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConfigurationSetsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// [EARLY ACCESS] AddConfigurationToSet: Add a configuration item to an existing set
        /// </summary>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Whether the configuration set is Personal or Shared</param>
        /// <param name="scope">The scope that identifies a configuration set</param>
        /// <param name="code">The code that identifies a configuration set</param>
        /// <param name="createConfigurationItem">The data to create a configuration item</param>
        /// <param name="userId">Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)</param>
        /// <returns>ConfigurationSet</returns>
        ConfigurationSet AddConfigurationToSet(string type, string scope, string code, CreateConfigurationItem createConfigurationItem, string userId = default(string));

        /// <summary>
        /// [EARLY ACCESS] AddConfigurationToSet: Add a configuration item to an existing set
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Whether the configuration set is Personal or Shared</param>
        /// <param name="scope">The scope that identifies a configuration set</param>
        /// <param name="code">The code that identifies a configuration set</param>
        /// <param name="createConfigurationItem">The data to create a configuration item</param>
        /// <param name="userId">Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)</param>
        /// <returns>ApiResponse of ConfigurationSet</returns>
        ApiResponse<ConfigurationSet> AddConfigurationToSetWithHttpInfo(string type, string scope, string code, CreateConfigurationItem createConfigurationItem, string userId = default(string));
        /// <summary>
        /// [BETA] CheckAccessTokenExists: Check the Personal Access Token exists for the current user
        /// </summary>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void CheckAccessTokenExists();

        /// <summary>
        /// [BETA] CheckAccessTokenExists: Check the Personal Access Token exists for the current user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CheckAccessTokenExistsWithHttpInfo();
        /// <summary>
        /// [EARLY ACCESS] CreateConfigurationSet: Create a configuration set
        /// </summary>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createConfigurationSet">The data to create a configuration set</param>
        /// <param name="userId">Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)</param>
        /// <returns>ConfigurationSet</returns>
        ConfigurationSet CreateConfigurationSet(CreateConfigurationSet createConfigurationSet, string userId = default(string));

        /// <summary>
        /// [EARLY ACCESS] CreateConfigurationSet: Create a configuration set
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createConfigurationSet">The data to create a configuration set</param>
        /// <param name="userId">Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)</param>
        /// <returns>ApiResponse of ConfigurationSet</returns>
        ApiResponse<ConfigurationSet> CreateConfigurationSetWithHttpInfo(CreateConfigurationSet createConfigurationSet, string userId = default(string));
        /// <summary>
        /// [EARLY ACCESS] DeleteAccessToken: Delete any stored Personal Access Token for the current user
        /// </summary>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void DeleteAccessToken();

        /// <summary>
        /// [EARLY ACCESS] DeleteAccessToken: Delete any stored Personal Access Token for the current user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAccessTokenWithHttpInfo();
        /// <summary>
        /// [EARLY ACCESS] DeleteConfigurationItem: Remove the specified configuration item from the specified configuration set
        /// </summary>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Whether the configuration set is Personal or Shared</param>
        /// <param name="scope">The scope that identifies a configuration set</param>
        /// <param name="code">The code that identifies a configuration set</param>
        /// <param name="key">The key that identifies a configuration item</param>
        /// <param name="userId">Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)</param>
        /// <returns></returns>
        void DeleteConfigurationItem(string type, string scope, string code, string key, string userId = default(string));

        /// <summary>
        /// [EARLY ACCESS] DeleteConfigurationItem: Remove the specified configuration item from the specified configuration set
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Whether the configuration set is Personal or Shared</param>
        /// <param name="scope">The scope that identifies a configuration set</param>
        /// <param name="code">The code that identifies a configuration set</param>
        /// <param name="key">The key that identifies a configuration item</param>
        /// <param name="userId">Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteConfigurationItemWithHttpInfo(string type, string scope, string code, string key, string userId = default(string));
        /// <summary>
        /// [EARLY ACCESS] DeleteConfigurationSet: Deletes a configuration set along with all their configuration items
        /// </summary>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Whether the configuration set is Personal or Shared</param>
        /// <param name="scope">The scope that identifies a configuration set</param>
        /// <param name="code">The code that identifies a configuration set</param>
        /// <param name="userId">Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)</param>
        /// <returns></returns>
        void DeleteConfigurationSet(string type, string scope, string code, string userId = default(string));

        /// <summary>
        /// [EARLY ACCESS] DeleteConfigurationSet: Deletes a configuration set along with all their configuration items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Whether the configuration set is Personal or Shared</param>
        /// <param name="scope">The scope that identifies a configuration set</param>
        /// <param name="code">The code that identifies a configuration set</param>
        /// <param name="userId">Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteConfigurationSetWithHttpInfo(string type, string scope, string code, string userId = default(string));
        /// <summary>
        /// [EARLY ACCESS] GenerateAccessToken: Generate a Personal Access Token for the current user and stores it in the me token
        /// </summary>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action">action&#x3D;regenerate &#x3D; Even if an existing parameter exists, forcibly regenerate a new one (deleting the old)  action&#x3D;ensure &#x3D; If no parameter exists, create one. If one does already exist, verify that it is still valid (call a service?), and if so, return it. If it is not still valid, then regenerate a new one.  action&#x3D;default &#x3D; If a parameter exists, return it. If not then create one. If this parameter is not provided, this is the default behaviour. (optional)</param>
        /// <returns>PersonalAccessToken</returns>
        PersonalAccessToken GenerateAccessToken(string action = default(string));

        /// <summary>
        /// [EARLY ACCESS] GenerateAccessToken: Generate a Personal Access Token for the current user and stores it in the me token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action">action&#x3D;regenerate &#x3D; Even if an existing parameter exists, forcibly regenerate a new one (deleting the old)  action&#x3D;ensure &#x3D; If no parameter exists, create one. If one does already exist, verify that it is still valid (call a service?), and if so, return it. If it is not still valid, then regenerate a new one.  action&#x3D;default &#x3D; If a parameter exists, return it. If not then create one. If this parameter is not provided, this is the default behaviour. (optional)</param>
        /// <returns>ApiResponse of PersonalAccessToken</returns>
        ApiResponse<PersonalAccessToken> GenerateAccessTokenWithHttpInfo(string action = default(string));
        /// <summary>
        /// [EARLY ACCESS] GetConfigurationItem: Get the specific configuration item within an existing set
        /// </summary>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Whether the configuration set is Personal or Shared</param>
        /// <param name="scope">The scope that identifies a configuration set</param>
        /// <param name="code">The code that identifies a configuration set</param>
        /// <param name="key">The key that identifies a configuration item</param>
        /// <param name="reveal">Whether to reveal the secrets. This is only available when the userId query setting has not been specified. (optional)</param>
        /// <param name="userId">Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)</param>
        /// <returns>ConfigurationItem</returns>
        ConfigurationItem GetConfigurationItem(string type, string scope, string code, string key, bool? reveal = default(bool?), string userId = default(string));

        /// <summary>
        /// [EARLY ACCESS] GetConfigurationItem: Get the specific configuration item within an existing set
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Whether the configuration set is Personal or Shared</param>
        /// <param name="scope">The scope that identifies a configuration set</param>
        /// <param name="code">The code that identifies a configuration set</param>
        /// <param name="key">The key that identifies a configuration item</param>
        /// <param name="reveal">Whether to reveal the secrets. This is only available when the userId query setting has not been specified. (optional)</param>
        /// <param name="userId">Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)</param>
        /// <returns>ApiResponse of ConfigurationItem</returns>
        ApiResponse<ConfigurationItem> GetConfigurationItemWithHttpInfo(string type, string scope, string code, string key, bool? reveal = default(bool?), string userId = default(string));
        /// <summary>
        /// [EARLY ACCESS] GetConfigurationSet: Get a configuration set, including all the associated metadata. By default secrets will not be revealed
        /// </summary>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Whether the configuration set is Personal or Shared</param>
        /// <param name="scope">The scope that identifies a configuration set</param>
        /// <param name="code">The code that identifies a configuration set</param>
        /// <param name="reveal">Whether to reveal the secrets. This is only available when the userId query setting has not been specified. (optional)</param>
        /// <param name="userId">Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)</param>
        /// <returns>ConfigurationSet</returns>
        ConfigurationSet GetConfigurationSet(string type, string scope, string code, bool? reveal = default(bool?), string userId = default(string));

        /// <summary>
        /// [EARLY ACCESS] GetConfigurationSet: Get a configuration set, including all the associated metadata. By default secrets will not be revealed
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Whether the configuration set is Personal or Shared</param>
        /// <param name="scope">The scope that identifies a configuration set</param>
        /// <param name="code">The code that identifies a configuration set</param>
        /// <param name="reveal">Whether to reveal the secrets. This is only available when the userId query setting has not been specified. (optional)</param>
        /// <param name="userId">Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)</param>
        /// <returns>ApiResponse of ConfigurationSet</returns>
        ApiResponse<ConfigurationSet> GetConfigurationSetWithHttpInfo(string type, string scope, string code, bool? reveal = default(bool?), string userId = default(string));
        /// <summary>
        /// [EARLY ACCESS] GetSystemConfigurationItems: Get the specific system configuration items within a system set  All users have access to this endpoint
        /// </summary>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code that identifies a system configuration set</param>
        /// <param name="key">The key that identifies a system configuration item</param>
        /// <param name="reveal">Whether to reveal the secrets (optional)</param>
        /// <returns>ResourceListOfConfigurationItem</returns>
        ResourceListOfConfigurationItem GetSystemConfigurationItems(string code, string key, bool? reveal = default(bool?));

        /// <summary>
        /// [EARLY ACCESS] GetSystemConfigurationItems: Get the specific system configuration items within a system set  All users have access to this endpoint
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code that identifies a system configuration set</param>
        /// <param name="key">The key that identifies a system configuration item</param>
        /// <param name="reveal">Whether to reveal the secrets (optional)</param>
        /// <returns>ApiResponse of ResourceListOfConfigurationItem</returns>
        ApiResponse<ResourceListOfConfigurationItem> GetSystemConfigurationItemsWithHttpInfo(string code, string key, bool? reveal = default(bool?));
        /// <summary>
        /// [EARLY ACCESS] GetSystemConfigurationSets: Get the specified system configuration sets, including all their associated metadata. By default secrets will not be revealed  All users have access to this endpoint
        /// </summary>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code that identifies a system configuration set</param>
        /// <param name="reveal">Whether to reveal the secrets (optional)</param>
        /// <returns>ResourceListOfConfigurationSet</returns>
        ResourceListOfConfigurationSet GetSystemConfigurationSets(string code, bool? reveal = default(bool?));

        /// <summary>
        /// [EARLY ACCESS] GetSystemConfigurationSets: Get the specified system configuration sets, including all their associated metadata. By default secrets will not be revealed  All users have access to this endpoint
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code that identifies a system configuration set</param>
        /// <param name="reveal">Whether to reveal the secrets (optional)</param>
        /// <returns>ApiResponse of ResourceListOfConfigurationSet</returns>
        ApiResponse<ResourceListOfConfigurationSet> GetSystemConfigurationSetsWithHttpInfo(string code, bool? reveal = default(bool?));
        /// <summary>
        /// [EARLY ACCESS] ListConfigurationSets: List all configuration sets summaries (I.e. list of scope/code combinations available)
        /// </summary>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Whether the configuration set is Personal or Shared (optional)</param>
        /// <param name="userId">Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)</param>
        /// <returns>ResourceListOfConfigurationSetSummary</returns>
        ResourceListOfConfigurationSetSummary ListConfigurationSets(string type = default(string), string userId = default(string));

        /// <summary>
        /// [EARLY ACCESS] ListConfigurationSets: List all configuration sets summaries (I.e. list of scope/code combinations available)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Whether the configuration set is Personal or Shared (optional)</param>
        /// <param name="userId">Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)</param>
        /// <returns>ApiResponse of ResourceListOfConfigurationSetSummary</returns>
        ApiResponse<ResourceListOfConfigurationSetSummary> ListConfigurationSetsWithHttpInfo(string type = default(string), string userId = default(string));
        /// <summary>
        /// [EARLY ACCESS] UpdateConfigurationItem: Update a configuration item&#39;s value and/or description
        /// </summary>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Whether the configuration set is Personal or Shared</param>
        /// <param name="scope">The scope that identifies a configuration set</param>
        /// <param name="code">The code that identifies a configuration set</param>
        /// <param name="key">The key that identifies a configuration item</param>
        /// <param name="updateConfigurationItem">The data to update a configuration item</param>
        /// <param name="userId">Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)</param>
        /// <returns>ConfigurationItem</returns>
        ConfigurationItem UpdateConfigurationItem(string type, string scope, string code, string key, UpdateConfigurationItem updateConfigurationItem, string userId = default(string));

        /// <summary>
        /// [EARLY ACCESS] UpdateConfigurationItem: Update a configuration item&#39;s value and/or description
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Whether the configuration set is Personal or Shared</param>
        /// <param name="scope">The scope that identifies a configuration set</param>
        /// <param name="code">The code that identifies a configuration set</param>
        /// <param name="key">The key that identifies a configuration item</param>
        /// <param name="updateConfigurationItem">The data to update a configuration item</param>
        /// <param name="userId">Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)</param>
        /// <returns>ApiResponse of ConfigurationItem</returns>
        ApiResponse<ConfigurationItem> UpdateConfigurationItemWithHttpInfo(string type, string scope, string code, string key, UpdateConfigurationItem updateConfigurationItem, string userId = default(string));
        /// <summary>
        /// [EARLY ACCESS] UpdateConfigurationSet: Update the description of a configuration set
        /// </summary>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Whether the configuration set is Personal or Shared</param>
        /// <param name="scope">The scope that identifies a configuration set</param>
        /// <param name="code">The code that identifies a configuration set</param>
        /// <param name="updateConfigurationSet">The data to update a configuration set</param>
        /// <param name="userId">Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)</param>
        /// <returns>ConfigurationSet</returns>
        ConfigurationSet UpdateConfigurationSet(string type, string scope, string code, UpdateConfigurationSet updateConfigurationSet, string userId = default(string));

        /// <summary>
        /// [EARLY ACCESS] UpdateConfigurationSet: Update the description of a configuration set
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Whether the configuration set is Personal or Shared</param>
        /// <param name="scope">The scope that identifies a configuration set</param>
        /// <param name="code">The code that identifies a configuration set</param>
        /// <param name="updateConfigurationSet">The data to update a configuration set</param>
        /// <param name="userId">Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)</param>
        /// <returns>ApiResponse of ConfigurationSet</returns>
        ApiResponse<ConfigurationSet> UpdateConfigurationSetWithHttpInfo(string type, string scope, string code, UpdateConfigurationSet updateConfigurationSet, string userId = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConfigurationSetsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// [EARLY ACCESS] AddConfigurationToSet: Add a configuration item to an existing set
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Whether the configuration set is Personal or Shared</param>
        /// <param name="scope">The scope that identifies a configuration set</param>
        /// <param name="code">The code that identifies a configuration set</param>
        /// <param name="createConfigurationItem">The data to create a configuration item</param>
        /// <param name="userId">Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConfigurationSet</returns>
        System.Threading.Tasks.Task<ConfigurationSet> AddConfigurationToSetAsync(string type, string scope, string code, CreateConfigurationItem createConfigurationItem, string userId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [EARLY ACCESS] AddConfigurationToSet: Add a configuration item to an existing set
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Whether the configuration set is Personal or Shared</param>
        /// <param name="scope">The scope that identifies a configuration set</param>
        /// <param name="code">The code that identifies a configuration set</param>
        /// <param name="createConfigurationItem">The data to create a configuration item</param>
        /// <param name="userId">Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConfigurationSet)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConfigurationSet>> AddConfigurationToSetWithHttpInfoAsync(string type, string scope, string code, CreateConfigurationItem createConfigurationItem, string userId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// [BETA] CheckAccessTokenExists: Check the Personal Access Token exists for the current user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CheckAccessTokenExistsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [BETA] CheckAccessTokenExists: Check the Personal Access Token exists for the current user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CheckAccessTokenExistsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// [EARLY ACCESS] CreateConfigurationSet: Create a configuration set
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createConfigurationSet">The data to create a configuration set</param>
        /// <param name="userId">Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConfigurationSet</returns>
        System.Threading.Tasks.Task<ConfigurationSet> CreateConfigurationSetAsync(CreateConfigurationSet createConfigurationSet, string userId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [EARLY ACCESS] CreateConfigurationSet: Create a configuration set
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createConfigurationSet">The data to create a configuration set</param>
        /// <param name="userId">Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConfigurationSet)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConfigurationSet>> CreateConfigurationSetWithHttpInfoAsync(CreateConfigurationSet createConfigurationSet, string userId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// [EARLY ACCESS] DeleteAccessToken: Delete any stored Personal Access Token for the current user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAccessTokenAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [EARLY ACCESS] DeleteAccessToken: Delete any stored Personal Access Token for the current user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAccessTokenWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// [EARLY ACCESS] DeleteConfigurationItem: Remove the specified configuration item from the specified configuration set
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Whether the configuration set is Personal or Shared</param>
        /// <param name="scope">The scope that identifies a configuration set</param>
        /// <param name="code">The code that identifies a configuration set</param>
        /// <param name="key">The key that identifies a configuration item</param>
        /// <param name="userId">Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteConfigurationItemAsync(string type, string scope, string code, string key, string userId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [EARLY ACCESS] DeleteConfigurationItem: Remove the specified configuration item from the specified configuration set
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Whether the configuration set is Personal or Shared</param>
        /// <param name="scope">The scope that identifies a configuration set</param>
        /// <param name="code">The code that identifies a configuration set</param>
        /// <param name="key">The key that identifies a configuration item</param>
        /// <param name="userId">Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteConfigurationItemWithHttpInfoAsync(string type, string scope, string code, string key, string userId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// [EARLY ACCESS] DeleteConfigurationSet: Deletes a configuration set along with all their configuration items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Whether the configuration set is Personal or Shared</param>
        /// <param name="scope">The scope that identifies a configuration set</param>
        /// <param name="code">The code that identifies a configuration set</param>
        /// <param name="userId">Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteConfigurationSetAsync(string type, string scope, string code, string userId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [EARLY ACCESS] DeleteConfigurationSet: Deletes a configuration set along with all their configuration items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Whether the configuration set is Personal or Shared</param>
        /// <param name="scope">The scope that identifies a configuration set</param>
        /// <param name="code">The code that identifies a configuration set</param>
        /// <param name="userId">Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteConfigurationSetWithHttpInfoAsync(string type, string scope, string code, string userId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// [EARLY ACCESS] GenerateAccessToken: Generate a Personal Access Token for the current user and stores it in the me token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action">action&#x3D;regenerate &#x3D; Even if an existing parameter exists, forcibly regenerate a new one (deleting the old)  action&#x3D;ensure &#x3D; If no parameter exists, create one. If one does already exist, verify that it is still valid (call a service?), and if so, return it. If it is not still valid, then regenerate a new one.  action&#x3D;default &#x3D; If a parameter exists, return it. If not then create one. If this parameter is not provided, this is the default behaviour. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PersonalAccessToken</returns>
        System.Threading.Tasks.Task<PersonalAccessToken> GenerateAccessTokenAsync(string action = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [EARLY ACCESS] GenerateAccessToken: Generate a Personal Access Token for the current user and stores it in the me token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action">action&#x3D;regenerate &#x3D; Even if an existing parameter exists, forcibly regenerate a new one (deleting the old)  action&#x3D;ensure &#x3D; If no parameter exists, create one. If one does already exist, verify that it is still valid (call a service?), and if so, return it. If it is not still valid, then regenerate a new one.  action&#x3D;default &#x3D; If a parameter exists, return it. If not then create one. If this parameter is not provided, this is the default behaviour. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PersonalAccessToken)</returns>
        System.Threading.Tasks.Task<ApiResponse<PersonalAccessToken>> GenerateAccessTokenWithHttpInfoAsync(string action = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// [EARLY ACCESS] GetConfigurationItem: Get the specific configuration item within an existing set
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Whether the configuration set is Personal or Shared</param>
        /// <param name="scope">The scope that identifies a configuration set</param>
        /// <param name="code">The code that identifies a configuration set</param>
        /// <param name="key">The key that identifies a configuration item</param>
        /// <param name="reveal">Whether to reveal the secrets. This is only available when the userId query setting has not been specified. (optional)</param>
        /// <param name="userId">Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConfigurationItem</returns>
        System.Threading.Tasks.Task<ConfigurationItem> GetConfigurationItemAsync(string type, string scope, string code, string key, bool? reveal = default(bool?), string userId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [EARLY ACCESS] GetConfigurationItem: Get the specific configuration item within an existing set
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Whether the configuration set is Personal or Shared</param>
        /// <param name="scope">The scope that identifies a configuration set</param>
        /// <param name="code">The code that identifies a configuration set</param>
        /// <param name="key">The key that identifies a configuration item</param>
        /// <param name="reveal">Whether to reveal the secrets. This is only available when the userId query setting has not been specified. (optional)</param>
        /// <param name="userId">Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConfigurationItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConfigurationItem>> GetConfigurationItemWithHttpInfoAsync(string type, string scope, string code, string key, bool? reveal = default(bool?), string userId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// [EARLY ACCESS] GetConfigurationSet: Get a configuration set, including all the associated metadata. By default secrets will not be revealed
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Whether the configuration set is Personal or Shared</param>
        /// <param name="scope">The scope that identifies a configuration set</param>
        /// <param name="code">The code that identifies a configuration set</param>
        /// <param name="reveal">Whether to reveal the secrets. This is only available when the userId query setting has not been specified. (optional)</param>
        /// <param name="userId">Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConfigurationSet</returns>
        System.Threading.Tasks.Task<ConfigurationSet> GetConfigurationSetAsync(string type, string scope, string code, bool? reveal = default(bool?), string userId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [EARLY ACCESS] GetConfigurationSet: Get a configuration set, including all the associated metadata. By default secrets will not be revealed
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Whether the configuration set is Personal or Shared</param>
        /// <param name="scope">The scope that identifies a configuration set</param>
        /// <param name="code">The code that identifies a configuration set</param>
        /// <param name="reveal">Whether to reveal the secrets. This is only available when the userId query setting has not been specified. (optional)</param>
        /// <param name="userId">Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConfigurationSet)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConfigurationSet>> GetConfigurationSetWithHttpInfoAsync(string type, string scope, string code, bool? reveal = default(bool?), string userId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// [EARLY ACCESS] GetSystemConfigurationItems: Get the specific system configuration items within a system set  All users have access to this endpoint
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code that identifies a system configuration set</param>
        /// <param name="key">The key that identifies a system configuration item</param>
        /// <param name="reveal">Whether to reveal the secrets (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceListOfConfigurationItem</returns>
        System.Threading.Tasks.Task<ResourceListOfConfigurationItem> GetSystemConfigurationItemsAsync(string code, string key, bool? reveal = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [EARLY ACCESS] GetSystemConfigurationItems: Get the specific system configuration items within a system set  All users have access to this endpoint
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code that identifies a system configuration set</param>
        /// <param name="key">The key that identifies a system configuration item</param>
        /// <param name="reveal">Whether to reveal the secrets (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceListOfConfigurationItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceListOfConfigurationItem>> GetSystemConfigurationItemsWithHttpInfoAsync(string code, string key, bool? reveal = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// [EARLY ACCESS] GetSystemConfigurationSets: Get the specified system configuration sets, including all their associated metadata. By default secrets will not be revealed  All users have access to this endpoint
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code that identifies a system configuration set</param>
        /// <param name="reveal">Whether to reveal the secrets (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceListOfConfigurationSet</returns>
        System.Threading.Tasks.Task<ResourceListOfConfigurationSet> GetSystemConfigurationSetsAsync(string code, bool? reveal = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [EARLY ACCESS] GetSystemConfigurationSets: Get the specified system configuration sets, including all their associated metadata. By default secrets will not be revealed  All users have access to this endpoint
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code that identifies a system configuration set</param>
        /// <param name="reveal">Whether to reveal the secrets (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceListOfConfigurationSet)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceListOfConfigurationSet>> GetSystemConfigurationSetsWithHttpInfoAsync(string code, bool? reveal = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// [EARLY ACCESS] ListConfigurationSets: List all configuration sets summaries (I.e. list of scope/code combinations available)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Whether the configuration set is Personal or Shared (optional)</param>
        /// <param name="userId">Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceListOfConfigurationSetSummary</returns>
        System.Threading.Tasks.Task<ResourceListOfConfigurationSetSummary> ListConfigurationSetsAsync(string type = default(string), string userId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [EARLY ACCESS] ListConfigurationSets: List all configuration sets summaries (I.e. list of scope/code combinations available)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Whether the configuration set is Personal or Shared (optional)</param>
        /// <param name="userId">Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceListOfConfigurationSetSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceListOfConfigurationSetSummary>> ListConfigurationSetsWithHttpInfoAsync(string type = default(string), string userId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// [EARLY ACCESS] UpdateConfigurationItem: Update a configuration item&#39;s value and/or description
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Whether the configuration set is Personal or Shared</param>
        /// <param name="scope">The scope that identifies a configuration set</param>
        /// <param name="code">The code that identifies a configuration set</param>
        /// <param name="key">The key that identifies a configuration item</param>
        /// <param name="updateConfigurationItem">The data to update a configuration item</param>
        /// <param name="userId">Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConfigurationItem</returns>
        System.Threading.Tasks.Task<ConfigurationItem> UpdateConfigurationItemAsync(string type, string scope, string code, string key, UpdateConfigurationItem updateConfigurationItem, string userId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [EARLY ACCESS] UpdateConfigurationItem: Update a configuration item&#39;s value and/or description
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Whether the configuration set is Personal or Shared</param>
        /// <param name="scope">The scope that identifies a configuration set</param>
        /// <param name="code">The code that identifies a configuration set</param>
        /// <param name="key">The key that identifies a configuration item</param>
        /// <param name="updateConfigurationItem">The data to update a configuration item</param>
        /// <param name="userId">Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConfigurationItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConfigurationItem>> UpdateConfigurationItemWithHttpInfoAsync(string type, string scope, string code, string key, UpdateConfigurationItem updateConfigurationItem, string userId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// [EARLY ACCESS] UpdateConfigurationSet: Update the description of a configuration set
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Whether the configuration set is Personal or Shared</param>
        /// <param name="scope">The scope that identifies a configuration set</param>
        /// <param name="code">The code that identifies a configuration set</param>
        /// <param name="updateConfigurationSet">The data to update a configuration set</param>
        /// <param name="userId">Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConfigurationSet</returns>
        System.Threading.Tasks.Task<ConfigurationSet> UpdateConfigurationSetAsync(string type, string scope, string code, UpdateConfigurationSet updateConfigurationSet, string userId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [EARLY ACCESS] UpdateConfigurationSet: Update the description of a configuration set
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Whether the configuration set is Personal or Shared</param>
        /// <param name="scope">The scope that identifies a configuration set</param>
        /// <param name="code">The code that identifies a configuration set</param>
        /// <param name="updateConfigurationSet">The data to update a configuration set</param>
        /// <param name="userId">Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConfigurationSet)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConfigurationSet>> UpdateConfigurationSetWithHttpInfoAsync(string type, string scope, string code, UpdateConfigurationSet updateConfigurationSet, string userId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConfigurationSetsApi : IConfigurationSetsApiSync, IConfigurationSetsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ConfigurationSetsApi : IConfigurationSetsApi
    {
        private Finbourne.Configuration.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigurationSetsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ConfigurationSetsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigurationSetsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ConfigurationSetsApi(String basePath)
        {
            this.Configuration = Finbourne.Configuration.Sdk.Client.Configuration.MergeConfigurations(
                Finbourne.Configuration.Sdk.Client.GlobalConfiguration.Instance,
                new Finbourne.Configuration.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Finbourne.Configuration.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Finbourne.Configuration.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Finbourne.Configuration.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigurationSetsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ConfigurationSetsApi(Finbourne.Configuration.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = configuration;
            this.Client = new Finbourne.Configuration.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Finbourne.Configuration.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Finbourne.Configuration.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigurationSetsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ConfigurationSetsApi(Finbourne.Configuration.Sdk.Client.ISynchronousClient client, Finbourne.Configuration.Sdk.Client.IAsynchronousClient asyncClient, Finbourne.Configuration.Sdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Finbourne.Configuration.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Finbourne.Configuration.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Finbourne.Configuration.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Finbourne.Configuration.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Finbourne.Configuration.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// [EARLY ACCESS] AddConfigurationToSet: Add a configuration item to an existing set 
        /// </summary>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Whether the configuration set is Personal or Shared</param>
        /// <param name="scope">The scope that identifies a configuration set</param>
        /// <param name="code">The code that identifies a configuration set</param>
        /// <param name="createConfigurationItem">The data to create a configuration item</param>
        /// <param name="userId">Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)</param>
        /// <returns>ConfigurationSet</returns>
        public ConfigurationSet AddConfigurationToSet(string type, string scope, string code, CreateConfigurationItem createConfigurationItem, string userId = default(string))
        {
            Finbourne.Configuration.Sdk.Client.ApiResponse<ConfigurationSet> localVarResponse = AddConfigurationToSetWithHttpInfo(type, scope, code, createConfigurationItem, userId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EARLY ACCESS] AddConfigurationToSet: Add a configuration item to an existing set 
        /// </summary>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Whether the configuration set is Personal or Shared</param>
        /// <param name="scope">The scope that identifies a configuration set</param>
        /// <param name="code">The code that identifies a configuration set</param>
        /// <param name="createConfigurationItem">The data to create a configuration item</param>
        /// <param name="userId">Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)</param>
        /// <returns>ApiResponse of ConfigurationSet</returns>
        public Finbourne.Configuration.Sdk.Client.ApiResponse<ConfigurationSet> AddConfigurationToSetWithHttpInfo(string type, string scope, string code, CreateConfigurationItem createConfigurationItem, string userId = default(string))
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new Finbourne.Configuration.Sdk.Client.ApiException(400, "Missing required parameter 'type' when calling ConfigurationSetsApi->AddConfigurationToSet");

            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new Finbourne.Configuration.Sdk.Client.ApiException(400, "Missing required parameter 'scope' when calling ConfigurationSetsApi->AddConfigurationToSet");

            // verify the required parameter 'code' is set
            if (code == null)
                throw new Finbourne.Configuration.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling ConfigurationSetsApi->AddConfigurationToSet");

            // verify the required parameter 'createConfigurationItem' is set
            if (createConfigurationItem == null)
                throw new Finbourne.Configuration.Sdk.Client.ApiException(400, "Missing required parameter 'createConfigurationItem' when calling ConfigurationSetsApi->AddConfigurationToSet");

            Finbourne.Configuration.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Configuration.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Configuration.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Configuration.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("type", Finbourne.Configuration.Sdk.Client.ClientUtils.ParameterToString(type)); // path parameter
            localVarRequestOptions.PathParameters.Add("scope", Finbourne.Configuration.Sdk.Client.ClientUtils.ParameterToString(scope)); // path parameter
            localVarRequestOptions.PathParameters.Add("code", Finbourne.Configuration.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter
            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Configuration.Sdk.Client.ClientUtils.ParameterToMultiMap("", "userId", userId));
            }
            localVarRequestOptions.Data = createConfigurationItem;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.1.448");

            // make the HTTP request
            var localVarResponse = this.Client.Post<ConfigurationSet>("/api/sets/{type}/{scope}/{code}/items", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddConfigurationToSet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EARLY ACCESS] AddConfigurationToSet: Add a configuration item to an existing set 
        /// </summary>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Whether the configuration set is Personal or Shared</param>
        /// <param name="scope">The scope that identifies a configuration set</param>
        /// <param name="code">The code that identifies a configuration set</param>
        /// <param name="createConfigurationItem">The data to create a configuration item</param>
        /// <param name="userId">Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConfigurationSet</returns>
        public async System.Threading.Tasks.Task<ConfigurationSet> AddConfigurationToSetAsync(string type, string scope, string code, CreateConfigurationItem createConfigurationItem, string userId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Finbourne.Configuration.Sdk.Client.ApiResponse<ConfigurationSet> localVarResponse = await AddConfigurationToSetWithHttpInfoAsync(type, scope, code, createConfigurationItem, userId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EARLY ACCESS] AddConfigurationToSet: Add a configuration item to an existing set 
        /// </summary>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Whether the configuration set is Personal or Shared</param>
        /// <param name="scope">The scope that identifies a configuration set</param>
        /// <param name="code">The code that identifies a configuration set</param>
        /// <param name="createConfigurationItem">The data to create a configuration item</param>
        /// <param name="userId">Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConfigurationSet)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Configuration.Sdk.Client.ApiResponse<ConfigurationSet>> AddConfigurationToSetWithHttpInfoAsync(string type, string scope, string code, CreateConfigurationItem createConfigurationItem, string userId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new Finbourne.Configuration.Sdk.Client.ApiException(400, "Missing required parameter 'type' when calling ConfigurationSetsApi->AddConfigurationToSet");

            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new Finbourne.Configuration.Sdk.Client.ApiException(400, "Missing required parameter 'scope' when calling ConfigurationSetsApi->AddConfigurationToSet");

            // verify the required parameter 'code' is set
            if (code == null)
                throw new Finbourne.Configuration.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling ConfigurationSetsApi->AddConfigurationToSet");

            // verify the required parameter 'createConfigurationItem' is set
            if (createConfigurationItem == null)
                throw new Finbourne.Configuration.Sdk.Client.ApiException(400, "Missing required parameter 'createConfigurationItem' when calling ConfigurationSetsApi->AddConfigurationToSet");


            Finbourne.Configuration.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Configuration.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Finbourne.Configuration.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Configuration.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("type", Finbourne.Configuration.Sdk.Client.ClientUtils.ParameterToString(type)); // path parameter
            localVarRequestOptions.PathParameters.Add("scope", Finbourne.Configuration.Sdk.Client.ClientUtils.ParameterToString(scope)); // path parameter
            localVarRequestOptions.PathParameters.Add("code", Finbourne.Configuration.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter
            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Configuration.Sdk.Client.ClientUtils.ParameterToMultiMap("", "userId", userId));
            }
            localVarRequestOptions.Data = createConfigurationItem;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.1.448");

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ConfigurationSet>("/api/sets/{type}/{scope}/{code}/items", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddConfigurationToSet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [BETA] CheckAccessTokenExists: Check the Personal Access Token exists for the current user 
        /// </summary>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void CheckAccessTokenExists()
        {
            CheckAccessTokenExistsWithHttpInfo();
        }

        /// <summary>
        /// [BETA] CheckAccessTokenExists: Check the Personal Access Token exists for the current user 
        /// </summary>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public Finbourne.Configuration.Sdk.Client.ApiResponse<Object> CheckAccessTokenExistsWithHttpInfo()
        {
            Finbourne.Configuration.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Configuration.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Finbourne.Configuration.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Configuration.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.1.448");

            // make the HTTP request
            var localVarResponse = this.Client.Head<Object>("/api/sets/personal/me", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CheckAccessTokenExists", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [BETA] CheckAccessTokenExists: Check the Personal Access Token exists for the current user 
        /// </summary>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CheckAccessTokenExistsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await CheckAccessTokenExistsWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// [BETA] CheckAccessTokenExists: Check the Personal Access Token exists for the current user 
        /// </summary>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Finbourne.Configuration.Sdk.Client.ApiResponse<Object>> CheckAccessTokenExistsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Finbourne.Configuration.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Configuration.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Finbourne.Configuration.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Configuration.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.1.448");

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.HeadAsync<Object>("/api/sets/personal/me", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CheckAccessTokenExists", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EARLY ACCESS] CreateConfigurationSet: Create a configuration set 
        /// </summary>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createConfigurationSet">The data to create a configuration set</param>
        /// <param name="userId">Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)</param>
        /// <returns>ConfigurationSet</returns>
        public ConfigurationSet CreateConfigurationSet(CreateConfigurationSet createConfigurationSet, string userId = default(string))
        {
            Finbourne.Configuration.Sdk.Client.ApiResponse<ConfigurationSet> localVarResponse = CreateConfigurationSetWithHttpInfo(createConfigurationSet, userId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EARLY ACCESS] CreateConfigurationSet: Create a configuration set 
        /// </summary>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createConfigurationSet">The data to create a configuration set</param>
        /// <param name="userId">Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)</param>
        /// <returns>ApiResponse of ConfigurationSet</returns>
        public Finbourne.Configuration.Sdk.Client.ApiResponse<ConfigurationSet> CreateConfigurationSetWithHttpInfo(CreateConfigurationSet createConfigurationSet, string userId = default(string))
        {
            // verify the required parameter 'createConfigurationSet' is set
            if (createConfigurationSet == null)
                throw new Finbourne.Configuration.Sdk.Client.ApiException(400, "Missing required parameter 'createConfigurationSet' when calling ConfigurationSetsApi->CreateConfigurationSet");

            Finbourne.Configuration.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Configuration.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Configuration.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Configuration.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Configuration.Sdk.Client.ClientUtils.ParameterToMultiMap("", "userId", userId));
            }
            localVarRequestOptions.Data = createConfigurationSet;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.1.448");

            // make the HTTP request
            var localVarResponse = this.Client.Post<ConfigurationSet>("/api/sets", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateConfigurationSet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EARLY ACCESS] CreateConfigurationSet: Create a configuration set 
        /// </summary>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createConfigurationSet">The data to create a configuration set</param>
        /// <param name="userId">Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConfigurationSet</returns>
        public async System.Threading.Tasks.Task<ConfigurationSet> CreateConfigurationSetAsync(CreateConfigurationSet createConfigurationSet, string userId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Finbourne.Configuration.Sdk.Client.ApiResponse<ConfigurationSet> localVarResponse = await CreateConfigurationSetWithHttpInfoAsync(createConfigurationSet, userId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EARLY ACCESS] CreateConfigurationSet: Create a configuration set 
        /// </summary>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createConfigurationSet">The data to create a configuration set</param>
        /// <param name="userId">Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConfigurationSet)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Configuration.Sdk.Client.ApiResponse<ConfigurationSet>> CreateConfigurationSetWithHttpInfoAsync(CreateConfigurationSet createConfigurationSet, string userId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createConfigurationSet' is set
            if (createConfigurationSet == null)
                throw new Finbourne.Configuration.Sdk.Client.ApiException(400, "Missing required parameter 'createConfigurationSet' when calling ConfigurationSetsApi->CreateConfigurationSet");


            Finbourne.Configuration.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Configuration.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Finbourne.Configuration.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Configuration.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Configuration.Sdk.Client.ClientUtils.ParameterToMultiMap("", "userId", userId));
            }
            localVarRequestOptions.Data = createConfigurationSet;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.1.448");

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ConfigurationSet>("/api/sets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateConfigurationSet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EARLY ACCESS] DeleteAccessToken: Delete any stored Personal Access Token for the current user 
        /// </summary>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void DeleteAccessToken()
        {
            DeleteAccessTokenWithHttpInfo();
        }

        /// <summary>
        /// [EARLY ACCESS] DeleteAccessToken: Delete any stored Personal Access Token for the current user 
        /// </summary>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public Finbourne.Configuration.Sdk.Client.ApiResponse<Object> DeleteAccessTokenWithHttpInfo()
        {
            Finbourne.Configuration.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Configuration.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Finbourne.Configuration.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Configuration.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.1.448");

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/sets/personal/me", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAccessToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EARLY ACCESS] DeleteAccessToken: Delete any stored Personal Access Token for the current user 
        /// </summary>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAccessTokenAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteAccessTokenWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// [EARLY ACCESS] DeleteAccessToken: Delete any stored Personal Access Token for the current user 
        /// </summary>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Finbourne.Configuration.Sdk.Client.ApiResponse<Object>> DeleteAccessTokenWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Finbourne.Configuration.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Configuration.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Finbourne.Configuration.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Configuration.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.1.448");

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/sets/personal/me", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAccessToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EARLY ACCESS] DeleteConfigurationItem: Remove the specified configuration item from the specified configuration set 
        /// </summary>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Whether the configuration set is Personal or Shared</param>
        /// <param name="scope">The scope that identifies a configuration set</param>
        /// <param name="code">The code that identifies a configuration set</param>
        /// <param name="key">The key that identifies a configuration item</param>
        /// <param name="userId">Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)</param>
        /// <returns></returns>
        public void DeleteConfigurationItem(string type, string scope, string code, string key, string userId = default(string))
        {
            DeleteConfigurationItemWithHttpInfo(type, scope, code, key, userId);
        }

        /// <summary>
        /// [EARLY ACCESS] DeleteConfigurationItem: Remove the specified configuration item from the specified configuration set 
        /// </summary>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Whether the configuration set is Personal or Shared</param>
        /// <param name="scope">The scope that identifies a configuration set</param>
        /// <param name="code">The code that identifies a configuration set</param>
        /// <param name="key">The key that identifies a configuration item</param>
        /// <param name="userId">Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Finbourne.Configuration.Sdk.Client.ApiResponse<Object> DeleteConfigurationItemWithHttpInfo(string type, string scope, string code, string key, string userId = default(string))
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new Finbourne.Configuration.Sdk.Client.ApiException(400, "Missing required parameter 'type' when calling ConfigurationSetsApi->DeleteConfigurationItem");

            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new Finbourne.Configuration.Sdk.Client.ApiException(400, "Missing required parameter 'scope' when calling ConfigurationSetsApi->DeleteConfigurationItem");

            // verify the required parameter 'code' is set
            if (code == null)
                throw new Finbourne.Configuration.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling ConfigurationSetsApi->DeleteConfigurationItem");

            // verify the required parameter 'key' is set
            if (key == null)
                throw new Finbourne.Configuration.Sdk.Client.ApiException(400, "Missing required parameter 'key' when calling ConfigurationSetsApi->DeleteConfigurationItem");

            Finbourne.Configuration.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Configuration.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Configuration.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Configuration.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("type", Finbourne.Configuration.Sdk.Client.ClientUtils.ParameterToString(type)); // path parameter
            localVarRequestOptions.PathParameters.Add("scope", Finbourne.Configuration.Sdk.Client.ClientUtils.ParameterToString(scope)); // path parameter
            localVarRequestOptions.PathParameters.Add("code", Finbourne.Configuration.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter
            localVarRequestOptions.PathParameters.Add("key", Finbourne.Configuration.Sdk.Client.ClientUtils.ParameterToString(key)); // path parameter
            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Configuration.Sdk.Client.ClientUtils.ParameterToMultiMap("", "userId", userId));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.1.448");

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/sets/{type}/{scope}/{code}/items/{key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteConfigurationItem", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EARLY ACCESS] DeleteConfigurationItem: Remove the specified configuration item from the specified configuration set 
        /// </summary>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Whether the configuration set is Personal or Shared</param>
        /// <param name="scope">The scope that identifies a configuration set</param>
        /// <param name="code">The code that identifies a configuration set</param>
        /// <param name="key">The key that identifies a configuration item</param>
        /// <param name="userId">Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteConfigurationItemAsync(string type, string scope, string code, string key, string userId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteConfigurationItemWithHttpInfoAsync(type, scope, code, key, userId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// [EARLY ACCESS] DeleteConfigurationItem: Remove the specified configuration item from the specified configuration set 
        /// </summary>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Whether the configuration set is Personal or Shared</param>
        /// <param name="scope">The scope that identifies a configuration set</param>
        /// <param name="code">The code that identifies a configuration set</param>
        /// <param name="key">The key that identifies a configuration item</param>
        /// <param name="userId">Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Finbourne.Configuration.Sdk.Client.ApiResponse<Object>> DeleteConfigurationItemWithHttpInfoAsync(string type, string scope, string code, string key, string userId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new Finbourne.Configuration.Sdk.Client.ApiException(400, "Missing required parameter 'type' when calling ConfigurationSetsApi->DeleteConfigurationItem");

            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new Finbourne.Configuration.Sdk.Client.ApiException(400, "Missing required parameter 'scope' when calling ConfigurationSetsApi->DeleteConfigurationItem");

            // verify the required parameter 'code' is set
            if (code == null)
                throw new Finbourne.Configuration.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling ConfigurationSetsApi->DeleteConfigurationItem");

            // verify the required parameter 'key' is set
            if (key == null)
                throw new Finbourne.Configuration.Sdk.Client.ApiException(400, "Missing required parameter 'key' when calling ConfigurationSetsApi->DeleteConfigurationItem");


            Finbourne.Configuration.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Configuration.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Finbourne.Configuration.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Configuration.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("type", Finbourne.Configuration.Sdk.Client.ClientUtils.ParameterToString(type)); // path parameter
            localVarRequestOptions.PathParameters.Add("scope", Finbourne.Configuration.Sdk.Client.ClientUtils.ParameterToString(scope)); // path parameter
            localVarRequestOptions.PathParameters.Add("code", Finbourne.Configuration.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter
            localVarRequestOptions.PathParameters.Add("key", Finbourne.Configuration.Sdk.Client.ClientUtils.ParameterToString(key)); // path parameter
            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Configuration.Sdk.Client.ClientUtils.ParameterToMultiMap("", "userId", userId));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.1.448");

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/sets/{type}/{scope}/{code}/items/{key}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteConfigurationItem", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EARLY ACCESS] DeleteConfigurationSet: Deletes a configuration set along with all their configuration items 
        /// </summary>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Whether the configuration set is Personal or Shared</param>
        /// <param name="scope">The scope that identifies a configuration set</param>
        /// <param name="code">The code that identifies a configuration set</param>
        /// <param name="userId">Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)</param>
        /// <returns></returns>
        public void DeleteConfigurationSet(string type, string scope, string code, string userId = default(string))
        {
            DeleteConfigurationSetWithHttpInfo(type, scope, code, userId);
        }

        /// <summary>
        /// [EARLY ACCESS] DeleteConfigurationSet: Deletes a configuration set along with all their configuration items 
        /// </summary>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Whether the configuration set is Personal or Shared</param>
        /// <param name="scope">The scope that identifies a configuration set</param>
        /// <param name="code">The code that identifies a configuration set</param>
        /// <param name="userId">Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Finbourne.Configuration.Sdk.Client.ApiResponse<Object> DeleteConfigurationSetWithHttpInfo(string type, string scope, string code, string userId = default(string))
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new Finbourne.Configuration.Sdk.Client.ApiException(400, "Missing required parameter 'type' when calling ConfigurationSetsApi->DeleteConfigurationSet");

            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new Finbourne.Configuration.Sdk.Client.ApiException(400, "Missing required parameter 'scope' when calling ConfigurationSetsApi->DeleteConfigurationSet");

            // verify the required parameter 'code' is set
            if (code == null)
                throw new Finbourne.Configuration.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling ConfigurationSetsApi->DeleteConfigurationSet");

            Finbourne.Configuration.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Configuration.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Configuration.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Configuration.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("type", Finbourne.Configuration.Sdk.Client.ClientUtils.ParameterToString(type)); // path parameter
            localVarRequestOptions.PathParameters.Add("scope", Finbourne.Configuration.Sdk.Client.ClientUtils.ParameterToString(scope)); // path parameter
            localVarRequestOptions.PathParameters.Add("code", Finbourne.Configuration.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter
            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Configuration.Sdk.Client.ClientUtils.ParameterToMultiMap("", "userId", userId));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.1.448");

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/sets/{type}/{scope}/{code}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteConfigurationSet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EARLY ACCESS] DeleteConfigurationSet: Deletes a configuration set along with all their configuration items 
        /// </summary>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Whether the configuration set is Personal or Shared</param>
        /// <param name="scope">The scope that identifies a configuration set</param>
        /// <param name="code">The code that identifies a configuration set</param>
        /// <param name="userId">Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteConfigurationSetAsync(string type, string scope, string code, string userId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteConfigurationSetWithHttpInfoAsync(type, scope, code, userId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// [EARLY ACCESS] DeleteConfigurationSet: Deletes a configuration set along with all their configuration items 
        /// </summary>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Whether the configuration set is Personal or Shared</param>
        /// <param name="scope">The scope that identifies a configuration set</param>
        /// <param name="code">The code that identifies a configuration set</param>
        /// <param name="userId">Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Finbourne.Configuration.Sdk.Client.ApiResponse<Object>> DeleteConfigurationSetWithHttpInfoAsync(string type, string scope, string code, string userId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new Finbourne.Configuration.Sdk.Client.ApiException(400, "Missing required parameter 'type' when calling ConfigurationSetsApi->DeleteConfigurationSet");

            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new Finbourne.Configuration.Sdk.Client.ApiException(400, "Missing required parameter 'scope' when calling ConfigurationSetsApi->DeleteConfigurationSet");

            // verify the required parameter 'code' is set
            if (code == null)
                throw new Finbourne.Configuration.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling ConfigurationSetsApi->DeleteConfigurationSet");


            Finbourne.Configuration.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Configuration.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Finbourne.Configuration.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Configuration.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("type", Finbourne.Configuration.Sdk.Client.ClientUtils.ParameterToString(type)); // path parameter
            localVarRequestOptions.PathParameters.Add("scope", Finbourne.Configuration.Sdk.Client.ClientUtils.ParameterToString(scope)); // path parameter
            localVarRequestOptions.PathParameters.Add("code", Finbourne.Configuration.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter
            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Configuration.Sdk.Client.ClientUtils.ParameterToMultiMap("", "userId", userId));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.1.448");

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/sets/{type}/{scope}/{code}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteConfigurationSet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EARLY ACCESS] GenerateAccessToken: Generate a Personal Access Token for the current user and stores it in the me token 
        /// </summary>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action">action&#x3D;regenerate &#x3D; Even if an existing parameter exists, forcibly regenerate a new one (deleting the old)  action&#x3D;ensure &#x3D; If no parameter exists, create one. If one does already exist, verify that it is still valid (call a service?), and if so, return it. If it is not still valid, then regenerate a new one.  action&#x3D;default &#x3D; If a parameter exists, return it. If not then create one. If this parameter is not provided, this is the default behaviour. (optional)</param>
        /// <returns>PersonalAccessToken</returns>
        public PersonalAccessToken GenerateAccessToken(string action = default(string))
        {
            Finbourne.Configuration.Sdk.Client.ApiResponse<PersonalAccessToken> localVarResponse = GenerateAccessTokenWithHttpInfo(action);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EARLY ACCESS] GenerateAccessToken: Generate a Personal Access Token for the current user and stores it in the me token 
        /// </summary>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action">action&#x3D;regenerate &#x3D; Even if an existing parameter exists, forcibly regenerate a new one (deleting the old)  action&#x3D;ensure &#x3D; If no parameter exists, create one. If one does already exist, verify that it is still valid (call a service?), and if so, return it. If it is not still valid, then regenerate a new one.  action&#x3D;default &#x3D; If a parameter exists, return it. If not then create one. If this parameter is not provided, this is the default behaviour. (optional)</param>
        /// <returns>ApiResponse of PersonalAccessToken</returns>
        public Finbourne.Configuration.Sdk.Client.ApiResponse<PersonalAccessToken> GenerateAccessTokenWithHttpInfo(string action = default(string))
        {
            Finbourne.Configuration.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Configuration.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Configuration.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Configuration.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (action != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Configuration.Sdk.Client.ClientUtils.ParameterToMultiMap("", "action", action));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.1.448");

            // make the HTTP request
            var localVarResponse = this.Client.Put<PersonalAccessToken>("/api/sets/personal/me", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenerateAccessToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EARLY ACCESS] GenerateAccessToken: Generate a Personal Access Token for the current user and stores it in the me token 
        /// </summary>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action">action&#x3D;regenerate &#x3D; Even if an existing parameter exists, forcibly regenerate a new one (deleting the old)  action&#x3D;ensure &#x3D; If no parameter exists, create one. If one does already exist, verify that it is still valid (call a service?), and if so, return it. If it is not still valid, then regenerate a new one.  action&#x3D;default &#x3D; If a parameter exists, return it. If not then create one. If this parameter is not provided, this is the default behaviour. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PersonalAccessToken</returns>
        public async System.Threading.Tasks.Task<PersonalAccessToken> GenerateAccessTokenAsync(string action = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Finbourne.Configuration.Sdk.Client.ApiResponse<PersonalAccessToken> localVarResponse = await GenerateAccessTokenWithHttpInfoAsync(action, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EARLY ACCESS] GenerateAccessToken: Generate a Personal Access Token for the current user and stores it in the me token 
        /// </summary>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action">action&#x3D;regenerate &#x3D; Even if an existing parameter exists, forcibly regenerate a new one (deleting the old)  action&#x3D;ensure &#x3D; If no parameter exists, create one. If one does already exist, verify that it is still valid (call a service?), and if so, return it. If it is not still valid, then regenerate a new one.  action&#x3D;default &#x3D; If a parameter exists, return it. If not then create one. If this parameter is not provided, this is the default behaviour. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PersonalAccessToken)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Configuration.Sdk.Client.ApiResponse<PersonalAccessToken>> GenerateAccessTokenWithHttpInfoAsync(string action = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Finbourne.Configuration.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Configuration.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Finbourne.Configuration.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Configuration.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (action != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Configuration.Sdk.Client.ClientUtils.ParameterToMultiMap("", "action", action));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.1.448");

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<PersonalAccessToken>("/api/sets/personal/me", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenerateAccessToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EARLY ACCESS] GetConfigurationItem: Get the specific configuration item within an existing set 
        /// </summary>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Whether the configuration set is Personal or Shared</param>
        /// <param name="scope">The scope that identifies a configuration set</param>
        /// <param name="code">The code that identifies a configuration set</param>
        /// <param name="key">The key that identifies a configuration item</param>
        /// <param name="reveal">Whether to reveal the secrets. This is only available when the userId query setting has not been specified. (optional)</param>
        /// <param name="userId">Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)</param>
        /// <returns>ConfigurationItem</returns>
        public ConfigurationItem GetConfigurationItem(string type, string scope, string code, string key, bool? reveal = default(bool?), string userId = default(string))
        {
            Finbourne.Configuration.Sdk.Client.ApiResponse<ConfigurationItem> localVarResponse = GetConfigurationItemWithHttpInfo(type, scope, code, key, reveal, userId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EARLY ACCESS] GetConfigurationItem: Get the specific configuration item within an existing set 
        /// </summary>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Whether the configuration set is Personal or Shared</param>
        /// <param name="scope">The scope that identifies a configuration set</param>
        /// <param name="code">The code that identifies a configuration set</param>
        /// <param name="key">The key that identifies a configuration item</param>
        /// <param name="reveal">Whether to reveal the secrets. This is only available when the userId query setting has not been specified. (optional)</param>
        /// <param name="userId">Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)</param>
        /// <returns>ApiResponse of ConfigurationItem</returns>
        public Finbourne.Configuration.Sdk.Client.ApiResponse<ConfigurationItem> GetConfigurationItemWithHttpInfo(string type, string scope, string code, string key, bool? reveal = default(bool?), string userId = default(string))
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new Finbourne.Configuration.Sdk.Client.ApiException(400, "Missing required parameter 'type' when calling ConfigurationSetsApi->GetConfigurationItem");

            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new Finbourne.Configuration.Sdk.Client.ApiException(400, "Missing required parameter 'scope' when calling ConfigurationSetsApi->GetConfigurationItem");

            // verify the required parameter 'code' is set
            if (code == null)
                throw new Finbourne.Configuration.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling ConfigurationSetsApi->GetConfigurationItem");

            // verify the required parameter 'key' is set
            if (key == null)
                throw new Finbourne.Configuration.Sdk.Client.ApiException(400, "Missing required parameter 'key' when calling ConfigurationSetsApi->GetConfigurationItem");

            Finbourne.Configuration.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Configuration.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Configuration.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Configuration.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("type", Finbourne.Configuration.Sdk.Client.ClientUtils.ParameterToString(type)); // path parameter
            localVarRequestOptions.PathParameters.Add("scope", Finbourne.Configuration.Sdk.Client.ClientUtils.ParameterToString(scope)); // path parameter
            localVarRequestOptions.PathParameters.Add("code", Finbourne.Configuration.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter
            localVarRequestOptions.PathParameters.Add("key", Finbourne.Configuration.Sdk.Client.ClientUtils.ParameterToString(key)); // path parameter
            if (reveal != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Configuration.Sdk.Client.ClientUtils.ParameterToMultiMap("", "reveal", reveal));
            }
            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Configuration.Sdk.Client.ClientUtils.ParameterToMultiMap("", "userId", userId));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.1.448");

            // make the HTTP request
            var localVarResponse = this.Client.Get<ConfigurationItem>("/api/sets/{type}/{scope}/{code}/items/{key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConfigurationItem", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EARLY ACCESS] GetConfigurationItem: Get the specific configuration item within an existing set 
        /// </summary>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Whether the configuration set is Personal or Shared</param>
        /// <param name="scope">The scope that identifies a configuration set</param>
        /// <param name="code">The code that identifies a configuration set</param>
        /// <param name="key">The key that identifies a configuration item</param>
        /// <param name="reveal">Whether to reveal the secrets. This is only available when the userId query setting has not been specified. (optional)</param>
        /// <param name="userId">Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConfigurationItem</returns>
        public async System.Threading.Tasks.Task<ConfigurationItem> GetConfigurationItemAsync(string type, string scope, string code, string key, bool? reveal = default(bool?), string userId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Finbourne.Configuration.Sdk.Client.ApiResponse<ConfigurationItem> localVarResponse = await GetConfigurationItemWithHttpInfoAsync(type, scope, code, key, reveal, userId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EARLY ACCESS] GetConfigurationItem: Get the specific configuration item within an existing set 
        /// </summary>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Whether the configuration set is Personal or Shared</param>
        /// <param name="scope">The scope that identifies a configuration set</param>
        /// <param name="code">The code that identifies a configuration set</param>
        /// <param name="key">The key that identifies a configuration item</param>
        /// <param name="reveal">Whether to reveal the secrets. This is only available when the userId query setting has not been specified. (optional)</param>
        /// <param name="userId">Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConfigurationItem)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Configuration.Sdk.Client.ApiResponse<ConfigurationItem>> GetConfigurationItemWithHttpInfoAsync(string type, string scope, string code, string key, bool? reveal = default(bool?), string userId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new Finbourne.Configuration.Sdk.Client.ApiException(400, "Missing required parameter 'type' when calling ConfigurationSetsApi->GetConfigurationItem");

            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new Finbourne.Configuration.Sdk.Client.ApiException(400, "Missing required parameter 'scope' when calling ConfigurationSetsApi->GetConfigurationItem");

            // verify the required parameter 'code' is set
            if (code == null)
                throw new Finbourne.Configuration.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling ConfigurationSetsApi->GetConfigurationItem");

            // verify the required parameter 'key' is set
            if (key == null)
                throw new Finbourne.Configuration.Sdk.Client.ApiException(400, "Missing required parameter 'key' when calling ConfigurationSetsApi->GetConfigurationItem");


            Finbourne.Configuration.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Configuration.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Finbourne.Configuration.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Configuration.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("type", Finbourne.Configuration.Sdk.Client.ClientUtils.ParameterToString(type)); // path parameter
            localVarRequestOptions.PathParameters.Add("scope", Finbourne.Configuration.Sdk.Client.ClientUtils.ParameterToString(scope)); // path parameter
            localVarRequestOptions.PathParameters.Add("code", Finbourne.Configuration.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter
            localVarRequestOptions.PathParameters.Add("key", Finbourne.Configuration.Sdk.Client.ClientUtils.ParameterToString(key)); // path parameter
            if (reveal != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Configuration.Sdk.Client.ClientUtils.ParameterToMultiMap("", "reveal", reveal));
            }
            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Configuration.Sdk.Client.ClientUtils.ParameterToMultiMap("", "userId", userId));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.1.448");

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ConfigurationItem>("/api/sets/{type}/{scope}/{code}/items/{key}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConfigurationItem", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EARLY ACCESS] GetConfigurationSet: Get a configuration set, including all the associated metadata. By default secrets will not be revealed 
        /// </summary>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Whether the configuration set is Personal or Shared</param>
        /// <param name="scope">The scope that identifies a configuration set</param>
        /// <param name="code">The code that identifies a configuration set</param>
        /// <param name="reveal">Whether to reveal the secrets. This is only available when the userId query setting has not been specified. (optional)</param>
        /// <param name="userId">Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)</param>
        /// <returns>ConfigurationSet</returns>
        public ConfigurationSet GetConfigurationSet(string type, string scope, string code, bool? reveal = default(bool?), string userId = default(string))
        {
            Finbourne.Configuration.Sdk.Client.ApiResponse<ConfigurationSet> localVarResponse = GetConfigurationSetWithHttpInfo(type, scope, code, reveal, userId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EARLY ACCESS] GetConfigurationSet: Get a configuration set, including all the associated metadata. By default secrets will not be revealed 
        /// </summary>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Whether the configuration set is Personal or Shared</param>
        /// <param name="scope">The scope that identifies a configuration set</param>
        /// <param name="code">The code that identifies a configuration set</param>
        /// <param name="reveal">Whether to reveal the secrets. This is only available when the userId query setting has not been specified. (optional)</param>
        /// <param name="userId">Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)</param>
        /// <returns>ApiResponse of ConfigurationSet</returns>
        public Finbourne.Configuration.Sdk.Client.ApiResponse<ConfigurationSet> GetConfigurationSetWithHttpInfo(string type, string scope, string code, bool? reveal = default(bool?), string userId = default(string))
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new Finbourne.Configuration.Sdk.Client.ApiException(400, "Missing required parameter 'type' when calling ConfigurationSetsApi->GetConfigurationSet");

            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new Finbourne.Configuration.Sdk.Client.ApiException(400, "Missing required parameter 'scope' when calling ConfigurationSetsApi->GetConfigurationSet");

            // verify the required parameter 'code' is set
            if (code == null)
                throw new Finbourne.Configuration.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling ConfigurationSetsApi->GetConfigurationSet");

            Finbourne.Configuration.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Configuration.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Configuration.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Configuration.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("type", Finbourne.Configuration.Sdk.Client.ClientUtils.ParameterToString(type)); // path parameter
            localVarRequestOptions.PathParameters.Add("scope", Finbourne.Configuration.Sdk.Client.ClientUtils.ParameterToString(scope)); // path parameter
            localVarRequestOptions.PathParameters.Add("code", Finbourne.Configuration.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter
            if (reveal != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Configuration.Sdk.Client.ClientUtils.ParameterToMultiMap("", "reveal", reveal));
            }
            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Configuration.Sdk.Client.ClientUtils.ParameterToMultiMap("", "userId", userId));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.1.448");

            // make the HTTP request
            var localVarResponse = this.Client.Get<ConfigurationSet>("/api/sets/{type}/{scope}/{code}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConfigurationSet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EARLY ACCESS] GetConfigurationSet: Get a configuration set, including all the associated metadata. By default secrets will not be revealed 
        /// </summary>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Whether the configuration set is Personal or Shared</param>
        /// <param name="scope">The scope that identifies a configuration set</param>
        /// <param name="code">The code that identifies a configuration set</param>
        /// <param name="reveal">Whether to reveal the secrets. This is only available when the userId query setting has not been specified. (optional)</param>
        /// <param name="userId">Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConfigurationSet</returns>
        public async System.Threading.Tasks.Task<ConfigurationSet> GetConfigurationSetAsync(string type, string scope, string code, bool? reveal = default(bool?), string userId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Finbourne.Configuration.Sdk.Client.ApiResponse<ConfigurationSet> localVarResponse = await GetConfigurationSetWithHttpInfoAsync(type, scope, code, reveal, userId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EARLY ACCESS] GetConfigurationSet: Get a configuration set, including all the associated metadata. By default secrets will not be revealed 
        /// </summary>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Whether the configuration set is Personal or Shared</param>
        /// <param name="scope">The scope that identifies a configuration set</param>
        /// <param name="code">The code that identifies a configuration set</param>
        /// <param name="reveal">Whether to reveal the secrets. This is only available when the userId query setting has not been specified. (optional)</param>
        /// <param name="userId">Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConfigurationSet)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Configuration.Sdk.Client.ApiResponse<ConfigurationSet>> GetConfigurationSetWithHttpInfoAsync(string type, string scope, string code, bool? reveal = default(bool?), string userId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new Finbourne.Configuration.Sdk.Client.ApiException(400, "Missing required parameter 'type' when calling ConfigurationSetsApi->GetConfigurationSet");

            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new Finbourne.Configuration.Sdk.Client.ApiException(400, "Missing required parameter 'scope' when calling ConfigurationSetsApi->GetConfigurationSet");

            // verify the required parameter 'code' is set
            if (code == null)
                throw new Finbourne.Configuration.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling ConfigurationSetsApi->GetConfigurationSet");


            Finbourne.Configuration.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Configuration.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Finbourne.Configuration.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Configuration.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("type", Finbourne.Configuration.Sdk.Client.ClientUtils.ParameterToString(type)); // path parameter
            localVarRequestOptions.PathParameters.Add("scope", Finbourne.Configuration.Sdk.Client.ClientUtils.ParameterToString(scope)); // path parameter
            localVarRequestOptions.PathParameters.Add("code", Finbourne.Configuration.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter
            if (reveal != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Configuration.Sdk.Client.ClientUtils.ParameterToMultiMap("", "reveal", reveal));
            }
            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Configuration.Sdk.Client.ClientUtils.ParameterToMultiMap("", "userId", userId));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.1.448");

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ConfigurationSet>("/api/sets/{type}/{scope}/{code}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConfigurationSet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EARLY ACCESS] GetSystemConfigurationItems: Get the specific system configuration items within a system set  All users have access to this endpoint 
        /// </summary>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code that identifies a system configuration set</param>
        /// <param name="key">The key that identifies a system configuration item</param>
        /// <param name="reveal">Whether to reveal the secrets (optional)</param>
        /// <returns>ResourceListOfConfigurationItem</returns>
        public ResourceListOfConfigurationItem GetSystemConfigurationItems(string code, string key, bool? reveal = default(bool?))
        {
            Finbourne.Configuration.Sdk.Client.ApiResponse<ResourceListOfConfigurationItem> localVarResponse = GetSystemConfigurationItemsWithHttpInfo(code, key, reveal);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EARLY ACCESS] GetSystemConfigurationItems: Get the specific system configuration items within a system set  All users have access to this endpoint 
        /// </summary>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code that identifies a system configuration set</param>
        /// <param name="key">The key that identifies a system configuration item</param>
        /// <param name="reveal">Whether to reveal the secrets (optional)</param>
        /// <returns>ApiResponse of ResourceListOfConfigurationItem</returns>
        public Finbourne.Configuration.Sdk.Client.ApiResponse<ResourceListOfConfigurationItem> GetSystemConfigurationItemsWithHttpInfo(string code, string key, bool? reveal = default(bool?))
        {
            // verify the required parameter 'code' is set
            if (code == null)
                throw new Finbourne.Configuration.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling ConfigurationSetsApi->GetSystemConfigurationItems");

            // verify the required parameter 'key' is set
            if (key == null)
                throw new Finbourne.Configuration.Sdk.Client.ApiException(400, "Missing required parameter 'key' when calling ConfigurationSetsApi->GetSystemConfigurationItems");

            Finbourne.Configuration.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Configuration.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Configuration.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Configuration.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("code", Finbourne.Configuration.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter
            localVarRequestOptions.PathParameters.Add("key", Finbourne.Configuration.Sdk.Client.ClientUtils.ParameterToString(key)); // path parameter
            if (reveal != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Configuration.Sdk.Client.ClientUtils.ParameterToMultiMap("", "reveal", reveal));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.1.448");

            // make the HTTP request
            var localVarResponse = this.Client.Get<ResourceListOfConfigurationItem>("/api/sets/system/{code}/items/{key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSystemConfigurationItems", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EARLY ACCESS] GetSystemConfigurationItems: Get the specific system configuration items within a system set  All users have access to this endpoint 
        /// </summary>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code that identifies a system configuration set</param>
        /// <param name="key">The key that identifies a system configuration item</param>
        /// <param name="reveal">Whether to reveal the secrets (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceListOfConfigurationItem</returns>
        public async System.Threading.Tasks.Task<ResourceListOfConfigurationItem> GetSystemConfigurationItemsAsync(string code, string key, bool? reveal = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Finbourne.Configuration.Sdk.Client.ApiResponse<ResourceListOfConfigurationItem> localVarResponse = await GetSystemConfigurationItemsWithHttpInfoAsync(code, key, reveal, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EARLY ACCESS] GetSystemConfigurationItems: Get the specific system configuration items within a system set  All users have access to this endpoint 
        /// </summary>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code that identifies a system configuration set</param>
        /// <param name="key">The key that identifies a system configuration item</param>
        /// <param name="reveal">Whether to reveal the secrets (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceListOfConfigurationItem)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Configuration.Sdk.Client.ApiResponse<ResourceListOfConfigurationItem>> GetSystemConfigurationItemsWithHttpInfoAsync(string code, string key, bool? reveal = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'code' is set
            if (code == null)
                throw new Finbourne.Configuration.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling ConfigurationSetsApi->GetSystemConfigurationItems");

            // verify the required parameter 'key' is set
            if (key == null)
                throw new Finbourne.Configuration.Sdk.Client.ApiException(400, "Missing required parameter 'key' when calling ConfigurationSetsApi->GetSystemConfigurationItems");


            Finbourne.Configuration.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Configuration.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Finbourne.Configuration.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Configuration.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("code", Finbourne.Configuration.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter
            localVarRequestOptions.PathParameters.Add("key", Finbourne.Configuration.Sdk.Client.ClientUtils.ParameterToString(key)); // path parameter
            if (reveal != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Configuration.Sdk.Client.ClientUtils.ParameterToMultiMap("", "reveal", reveal));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.1.448");

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ResourceListOfConfigurationItem>("/api/sets/system/{code}/items/{key}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSystemConfigurationItems", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EARLY ACCESS] GetSystemConfigurationSets: Get the specified system configuration sets, including all their associated metadata. By default secrets will not be revealed  All users have access to this endpoint 
        /// </summary>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code that identifies a system configuration set</param>
        /// <param name="reveal">Whether to reveal the secrets (optional)</param>
        /// <returns>ResourceListOfConfigurationSet</returns>
        public ResourceListOfConfigurationSet GetSystemConfigurationSets(string code, bool? reveal = default(bool?))
        {
            Finbourne.Configuration.Sdk.Client.ApiResponse<ResourceListOfConfigurationSet> localVarResponse = GetSystemConfigurationSetsWithHttpInfo(code, reveal);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EARLY ACCESS] GetSystemConfigurationSets: Get the specified system configuration sets, including all their associated metadata. By default secrets will not be revealed  All users have access to this endpoint 
        /// </summary>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code that identifies a system configuration set</param>
        /// <param name="reveal">Whether to reveal the secrets (optional)</param>
        /// <returns>ApiResponse of ResourceListOfConfigurationSet</returns>
        public Finbourne.Configuration.Sdk.Client.ApiResponse<ResourceListOfConfigurationSet> GetSystemConfigurationSetsWithHttpInfo(string code, bool? reveal = default(bool?))
        {
            // verify the required parameter 'code' is set
            if (code == null)
                throw new Finbourne.Configuration.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling ConfigurationSetsApi->GetSystemConfigurationSets");

            Finbourne.Configuration.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Configuration.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Configuration.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Configuration.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("code", Finbourne.Configuration.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter
            if (reveal != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Configuration.Sdk.Client.ClientUtils.ParameterToMultiMap("", "reveal", reveal));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.1.448");

            // make the HTTP request
            var localVarResponse = this.Client.Get<ResourceListOfConfigurationSet>("/api/sets/system/{code}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSystemConfigurationSets", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EARLY ACCESS] GetSystemConfigurationSets: Get the specified system configuration sets, including all their associated metadata. By default secrets will not be revealed  All users have access to this endpoint 
        /// </summary>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code that identifies a system configuration set</param>
        /// <param name="reveal">Whether to reveal the secrets (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceListOfConfigurationSet</returns>
        public async System.Threading.Tasks.Task<ResourceListOfConfigurationSet> GetSystemConfigurationSetsAsync(string code, bool? reveal = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Finbourne.Configuration.Sdk.Client.ApiResponse<ResourceListOfConfigurationSet> localVarResponse = await GetSystemConfigurationSetsWithHttpInfoAsync(code, reveal, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EARLY ACCESS] GetSystemConfigurationSets: Get the specified system configuration sets, including all their associated metadata. By default secrets will not be revealed  All users have access to this endpoint 
        /// </summary>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code that identifies a system configuration set</param>
        /// <param name="reveal">Whether to reveal the secrets (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceListOfConfigurationSet)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Configuration.Sdk.Client.ApiResponse<ResourceListOfConfigurationSet>> GetSystemConfigurationSetsWithHttpInfoAsync(string code, bool? reveal = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'code' is set
            if (code == null)
                throw new Finbourne.Configuration.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling ConfigurationSetsApi->GetSystemConfigurationSets");


            Finbourne.Configuration.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Configuration.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Finbourne.Configuration.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Configuration.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("code", Finbourne.Configuration.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter
            if (reveal != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Configuration.Sdk.Client.ClientUtils.ParameterToMultiMap("", "reveal", reveal));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.1.448");

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ResourceListOfConfigurationSet>("/api/sets/system/{code}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSystemConfigurationSets", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EARLY ACCESS] ListConfigurationSets: List all configuration sets summaries (I.e. list of scope/code combinations available) 
        /// </summary>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Whether the configuration set is Personal or Shared (optional)</param>
        /// <param name="userId">Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)</param>
        /// <returns>ResourceListOfConfigurationSetSummary</returns>
        public ResourceListOfConfigurationSetSummary ListConfigurationSets(string type = default(string), string userId = default(string))
        {
            Finbourne.Configuration.Sdk.Client.ApiResponse<ResourceListOfConfigurationSetSummary> localVarResponse = ListConfigurationSetsWithHttpInfo(type, userId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EARLY ACCESS] ListConfigurationSets: List all configuration sets summaries (I.e. list of scope/code combinations available) 
        /// </summary>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Whether the configuration set is Personal or Shared (optional)</param>
        /// <param name="userId">Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)</param>
        /// <returns>ApiResponse of ResourceListOfConfigurationSetSummary</returns>
        public Finbourne.Configuration.Sdk.Client.ApiResponse<ResourceListOfConfigurationSetSummary> ListConfigurationSetsWithHttpInfo(string type = default(string), string userId = default(string))
        {
            Finbourne.Configuration.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Configuration.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Configuration.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Configuration.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Configuration.Sdk.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Configuration.Sdk.Client.ClientUtils.ParameterToMultiMap("", "userId", userId));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.1.448");

            // make the HTTP request
            var localVarResponse = this.Client.Get<ResourceListOfConfigurationSetSummary>("/api/sets", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListConfigurationSets", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EARLY ACCESS] ListConfigurationSets: List all configuration sets summaries (I.e. list of scope/code combinations available) 
        /// </summary>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Whether the configuration set is Personal or Shared (optional)</param>
        /// <param name="userId">Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceListOfConfigurationSetSummary</returns>
        public async System.Threading.Tasks.Task<ResourceListOfConfigurationSetSummary> ListConfigurationSetsAsync(string type = default(string), string userId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Finbourne.Configuration.Sdk.Client.ApiResponse<ResourceListOfConfigurationSetSummary> localVarResponse = await ListConfigurationSetsWithHttpInfoAsync(type, userId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EARLY ACCESS] ListConfigurationSets: List all configuration sets summaries (I.e. list of scope/code combinations available) 
        /// </summary>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Whether the configuration set is Personal or Shared (optional)</param>
        /// <param name="userId">Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceListOfConfigurationSetSummary)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Configuration.Sdk.Client.ApiResponse<ResourceListOfConfigurationSetSummary>> ListConfigurationSetsWithHttpInfoAsync(string type = default(string), string userId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Finbourne.Configuration.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Configuration.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Finbourne.Configuration.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Configuration.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Configuration.Sdk.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Configuration.Sdk.Client.ClientUtils.ParameterToMultiMap("", "userId", userId));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.1.448");

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ResourceListOfConfigurationSetSummary>("/api/sets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListConfigurationSets", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EARLY ACCESS] UpdateConfigurationItem: Update a configuration item&#39;s value and/or description 
        /// </summary>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Whether the configuration set is Personal or Shared</param>
        /// <param name="scope">The scope that identifies a configuration set</param>
        /// <param name="code">The code that identifies a configuration set</param>
        /// <param name="key">The key that identifies a configuration item</param>
        /// <param name="updateConfigurationItem">The data to update a configuration item</param>
        /// <param name="userId">Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)</param>
        /// <returns>ConfigurationItem</returns>
        public ConfigurationItem UpdateConfigurationItem(string type, string scope, string code, string key, UpdateConfigurationItem updateConfigurationItem, string userId = default(string))
        {
            Finbourne.Configuration.Sdk.Client.ApiResponse<ConfigurationItem> localVarResponse = UpdateConfigurationItemWithHttpInfo(type, scope, code, key, updateConfigurationItem, userId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EARLY ACCESS] UpdateConfigurationItem: Update a configuration item&#39;s value and/or description 
        /// </summary>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Whether the configuration set is Personal or Shared</param>
        /// <param name="scope">The scope that identifies a configuration set</param>
        /// <param name="code">The code that identifies a configuration set</param>
        /// <param name="key">The key that identifies a configuration item</param>
        /// <param name="updateConfigurationItem">The data to update a configuration item</param>
        /// <param name="userId">Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)</param>
        /// <returns>ApiResponse of ConfigurationItem</returns>
        public Finbourne.Configuration.Sdk.Client.ApiResponse<ConfigurationItem> UpdateConfigurationItemWithHttpInfo(string type, string scope, string code, string key, UpdateConfigurationItem updateConfigurationItem, string userId = default(string))
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new Finbourne.Configuration.Sdk.Client.ApiException(400, "Missing required parameter 'type' when calling ConfigurationSetsApi->UpdateConfigurationItem");

            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new Finbourne.Configuration.Sdk.Client.ApiException(400, "Missing required parameter 'scope' when calling ConfigurationSetsApi->UpdateConfigurationItem");

            // verify the required parameter 'code' is set
            if (code == null)
                throw new Finbourne.Configuration.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling ConfigurationSetsApi->UpdateConfigurationItem");

            // verify the required parameter 'key' is set
            if (key == null)
                throw new Finbourne.Configuration.Sdk.Client.ApiException(400, "Missing required parameter 'key' when calling ConfigurationSetsApi->UpdateConfigurationItem");

            // verify the required parameter 'updateConfigurationItem' is set
            if (updateConfigurationItem == null)
                throw new Finbourne.Configuration.Sdk.Client.ApiException(400, "Missing required parameter 'updateConfigurationItem' when calling ConfigurationSetsApi->UpdateConfigurationItem");

            Finbourne.Configuration.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Configuration.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Configuration.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Configuration.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("type", Finbourne.Configuration.Sdk.Client.ClientUtils.ParameterToString(type)); // path parameter
            localVarRequestOptions.PathParameters.Add("scope", Finbourne.Configuration.Sdk.Client.ClientUtils.ParameterToString(scope)); // path parameter
            localVarRequestOptions.PathParameters.Add("code", Finbourne.Configuration.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter
            localVarRequestOptions.PathParameters.Add("key", Finbourne.Configuration.Sdk.Client.ClientUtils.ParameterToString(key)); // path parameter
            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Configuration.Sdk.Client.ClientUtils.ParameterToMultiMap("", "userId", userId));
            }
            localVarRequestOptions.Data = updateConfigurationItem;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.1.448");

            // make the HTTP request
            var localVarResponse = this.Client.Put<ConfigurationItem>("/api/sets/{type}/{scope}/{code}/items/{key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateConfigurationItem", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EARLY ACCESS] UpdateConfigurationItem: Update a configuration item&#39;s value and/or description 
        /// </summary>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Whether the configuration set is Personal or Shared</param>
        /// <param name="scope">The scope that identifies a configuration set</param>
        /// <param name="code">The code that identifies a configuration set</param>
        /// <param name="key">The key that identifies a configuration item</param>
        /// <param name="updateConfigurationItem">The data to update a configuration item</param>
        /// <param name="userId">Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConfigurationItem</returns>
        public async System.Threading.Tasks.Task<ConfigurationItem> UpdateConfigurationItemAsync(string type, string scope, string code, string key, UpdateConfigurationItem updateConfigurationItem, string userId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Finbourne.Configuration.Sdk.Client.ApiResponse<ConfigurationItem> localVarResponse = await UpdateConfigurationItemWithHttpInfoAsync(type, scope, code, key, updateConfigurationItem, userId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EARLY ACCESS] UpdateConfigurationItem: Update a configuration item&#39;s value and/or description 
        /// </summary>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Whether the configuration set is Personal or Shared</param>
        /// <param name="scope">The scope that identifies a configuration set</param>
        /// <param name="code">The code that identifies a configuration set</param>
        /// <param name="key">The key that identifies a configuration item</param>
        /// <param name="updateConfigurationItem">The data to update a configuration item</param>
        /// <param name="userId">Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConfigurationItem)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Configuration.Sdk.Client.ApiResponse<ConfigurationItem>> UpdateConfigurationItemWithHttpInfoAsync(string type, string scope, string code, string key, UpdateConfigurationItem updateConfigurationItem, string userId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new Finbourne.Configuration.Sdk.Client.ApiException(400, "Missing required parameter 'type' when calling ConfigurationSetsApi->UpdateConfigurationItem");

            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new Finbourne.Configuration.Sdk.Client.ApiException(400, "Missing required parameter 'scope' when calling ConfigurationSetsApi->UpdateConfigurationItem");

            // verify the required parameter 'code' is set
            if (code == null)
                throw new Finbourne.Configuration.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling ConfigurationSetsApi->UpdateConfigurationItem");

            // verify the required parameter 'key' is set
            if (key == null)
                throw new Finbourne.Configuration.Sdk.Client.ApiException(400, "Missing required parameter 'key' when calling ConfigurationSetsApi->UpdateConfigurationItem");

            // verify the required parameter 'updateConfigurationItem' is set
            if (updateConfigurationItem == null)
                throw new Finbourne.Configuration.Sdk.Client.ApiException(400, "Missing required parameter 'updateConfigurationItem' when calling ConfigurationSetsApi->UpdateConfigurationItem");


            Finbourne.Configuration.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Configuration.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Finbourne.Configuration.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Configuration.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("type", Finbourne.Configuration.Sdk.Client.ClientUtils.ParameterToString(type)); // path parameter
            localVarRequestOptions.PathParameters.Add("scope", Finbourne.Configuration.Sdk.Client.ClientUtils.ParameterToString(scope)); // path parameter
            localVarRequestOptions.PathParameters.Add("code", Finbourne.Configuration.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter
            localVarRequestOptions.PathParameters.Add("key", Finbourne.Configuration.Sdk.Client.ClientUtils.ParameterToString(key)); // path parameter
            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Configuration.Sdk.Client.ClientUtils.ParameterToMultiMap("", "userId", userId));
            }
            localVarRequestOptions.Data = updateConfigurationItem;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.1.448");

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<ConfigurationItem>("/api/sets/{type}/{scope}/{code}/items/{key}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateConfigurationItem", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EARLY ACCESS] UpdateConfigurationSet: Update the description of a configuration set 
        /// </summary>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Whether the configuration set is Personal or Shared</param>
        /// <param name="scope">The scope that identifies a configuration set</param>
        /// <param name="code">The code that identifies a configuration set</param>
        /// <param name="updateConfigurationSet">The data to update a configuration set</param>
        /// <param name="userId">Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)</param>
        /// <returns>ConfigurationSet</returns>
        public ConfigurationSet UpdateConfigurationSet(string type, string scope, string code, UpdateConfigurationSet updateConfigurationSet, string userId = default(string))
        {
            Finbourne.Configuration.Sdk.Client.ApiResponse<ConfigurationSet> localVarResponse = UpdateConfigurationSetWithHttpInfo(type, scope, code, updateConfigurationSet, userId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EARLY ACCESS] UpdateConfigurationSet: Update the description of a configuration set 
        /// </summary>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Whether the configuration set is Personal or Shared</param>
        /// <param name="scope">The scope that identifies a configuration set</param>
        /// <param name="code">The code that identifies a configuration set</param>
        /// <param name="updateConfigurationSet">The data to update a configuration set</param>
        /// <param name="userId">Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)</param>
        /// <returns>ApiResponse of ConfigurationSet</returns>
        public Finbourne.Configuration.Sdk.Client.ApiResponse<ConfigurationSet> UpdateConfigurationSetWithHttpInfo(string type, string scope, string code, UpdateConfigurationSet updateConfigurationSet, string userId = default(string))
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new Finbourne.Configuration.Sdk.Client.ApiException(400, "Missing required parameter 'type' when calling ConfigurationSetsApi->UpdateConfigurationSet");

            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new Finbourne.Configuration.Sdk.Client.ApiException(400, "Missing required parameter 'scope' when calling ConfigurationSetsApi->UpdateConfigurationSet");

            // verify the required parameter 'code' is set
            if (code == null)
                throw new Finbourne.Configuration.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling ConfigurationSetsApi->UpdateConfigurationSet");

            // verify the required parameter 'updateConfigurationSet' is set
            if (updateConfigurationSet == null)
                throw new Finbourne.Configuration.Sdk.Client.ApiException(400, "Missing required parameter 'updateConfigurationSet' when calling ConfigurationSetsApi->UpdateConfigurationSet");

            Finbourne.Configuration.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Configuration.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Configuration.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Configuration.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("type", Finbourne.Configuration.Sdk.Client.ClientUtils.ParameterToString(type)); // path parameter
            localVarRequestOptions.PathParameters.Add("scope", Finbourne.Configuration.Sdk.Client.ClientUtils.ParameterToString(scope)); // path parameter
            localVarRequestOptions.PathParameters.Add("code", Finbourne.Configuration.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter
            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Configuration.Sdk.Client.ClientUtils.ParameterToMultiMap("", "userId", userId));
            }
            localVarRequestOptions.Data = updateConfigurationSet;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.1.448");

            // make the HTTP request
            var localVarResponse = this.Client.Put<ConfigurationSet>("/api/sets/{type}/{scope}/{code}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateConfigurationSet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EARLY ACCESS] UpdateConfigurationSet: Update the description of a configuration set 
        /// </summary>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Whether the configuration set is Personal or Shared</param>
        /// <param name="scope">The scope that identifies a configuration set</param>
        /// <param name="code">The code that identifies a configuration set</param>
        /// <param name="updateConfigurationSet">The data to update a configuration set</param>
        /// <param name="userId">Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConfigurationSet</returns>
        public async System.Threading.Tasks.Task<ConfigurationSet> UpdateConfigurationSetAsync(string type, string scope, string code, UpdateConfigurationSet updateConfigurationSet, string userId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Finbourne.Configuration.Sdk.Client.ApiResponse<ConfigurationSet> localVarResponse = await UpdateConfigurationSetWithHttpInfoAsync(type, scope, code, updateConfigurationSet, userId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EARLY ACCESS] UpdateConfigurationSet: Update the description of a configuration set 
        /// </summary>
        /// <exception cref="Finbourne.Configuration.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Whether the configuration set is Personal or Shared</param>
        /// <param name="scope">The scope that identifies a configuration set</param>
        /// <param name="code">The code that identifies a configuration set</param>
        /// <param name="updateConfigurationSet">The data to update a configuration set</param>
        /// <param name="userId">Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConfigurationSet)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Configuration.Sdk.Client.ApiResponse<ConfigurationSet>> UpdateConfigurationSetWithHttpInfoAsync(string type, string scope, string code, UpdateConfigurationSet updateConfigurationSet, string userId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new Finbourne.Configuration.Sdk.Client.ApiException(400, "Missing required parameter 'type' when calling ConfigurationSetsApi->UpdateConfigurationSet");

            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new Finbourne.Configuration.Sdk.Client.ApiException(400, "Missing required parameter 'scope' when calling ConfigurationSetsApi->UpdateConfigurationSet");

            // verify the required parameter 'code' is set
            if (code == null)
                throw new Finbourne.Configuration.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling ConfigurationSetsApi->UpdateConfigurationSet");

            // verify the required parameter 'updateConfigurationSet' is set
            if (updateConfigurationSet == null)
                throw new Finbourne.Configuration.Sdk.Client.ApiException(400, "Missing required parameter 'updateConfigurationSet' when calling ConfigurationSetsApi->UpdateConfigurationSet");


            Finbourne.Configuration.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Configuration.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Finbourne.Configuration.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Configuration.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("type", Finbourne.Configuration.Sdk.Client.ClientUtils.ParameterToString(type)); // path parameter
            localVarRequestOptions.PathParameters.Add("scope", Finbourne.Configuration.Sdk.Client.ClientUtils.ParameterToString(scope)); // path parameter
            localVarRequestOptions.PathParameters.Add("code", Finbourne.Configuration.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter
            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Configuration.Sdk.Client.ClientUtils.ParameterToMultiMap("", "userId", userId));
            }
            localVarRequestOptions.Data = updateConfigurationSet;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.1.448");

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<ConfigurationSet>("/api/sets/{type}/{scope}/{code}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateConfigurationSet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}